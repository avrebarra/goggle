#!/usr/bin/env ruby

require 'json'
require 'optparse'

def transform_pretty_print(log, options)
  if system('which jq &>/dev/null')
    output = log.strip
    output = `echo '#{output}' | jq --color-output . 2>&1` unless output.empty?
    raise "Failed to parse JSON: #{output}" unless $?.success? || output.empty?
    log = output
  else
    log = JSON.pretty_generate(JSON.parse(log))
  end
  log
end

def transform_plain(log, options)
  log
end

def load_module(path)
  load path
  true
rescue
  false
end

def main
  transformers = {
    'prettyprint' => method(:transform_pretty_print),
    'plain' => method(:transform_plain),
  }
  
  options = {}
  OptionParser.new do |opts|
  opts.banner = "Usage: logform [options]"
  opts.on("-f", "--filter FILTER_NAME", "Specify the filter. Available filters: prettyprint/plain/FILE_PATH -- To specify custom transformer, provide path to .rb file with `def transform(log, options)`") do |transform|
      options[:transform] = transform || 'plain'
  end
  opts.on("-p", "--pretty", "Enable JSON pretty print. Equivalent to '-f prettyprint'") do
      options[:transform] = 'prettyprint'
  end
  opts.on("-h", "--help", "Prints this help") do
      puts opts
      exit
  end
  end.parse!
  
  # deduce mode
  mode = options[:transform]
  if transformers.key?(mode)
  elsif load_module(mode)
    transformers['transform_file'] = method(:transform)
    mode = 'transform_file'
  else
    mode = 'plain'
  end
  
  log = ''
  isfailstreak = false
  while (line = STDIN.gets) do
    log += line
    if line =~ /\n\z/
      begin
        out = transformers[mode].call(log, options)
        isfailstreak = false unless out.empty?
      rescue => e
        warn "\e[90mFailed to transform: #{e.message.strip}\e[0m" unless isfailstreak
        isfailstreak = true
        out = log
      end
      unless out.empty?
        $stdout.write(out.strip + "\n")
        $stdout.flush
      end
      log = ''
    end
  end
end

main if __FILE__ == $0