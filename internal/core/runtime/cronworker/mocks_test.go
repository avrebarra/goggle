// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package cronworker_test

import (
	"context"
	"github.com/avrebarra/goggle/internal/core/runtime/cronworker"
	"github.com/avrebarra/goggle/internal/module/clientgithubrepo"
	"sync"
)

// Ensure, that GitHubClientMock does implement cronworker.GitHubClient.
// If this is not the case, regenerate this file with moq.
var _ cronworker.GitHubClient = &GitHubClientMock{}

// GitHubClientMock is a mock implementation of cronworker.GitHubClient.
//
//	func TestSomethingThatUsesGitHubClient(t *testing.T) {
//
//		// make and configure a mocked cronworker.GitHubClient
//		mockedGitHubClient := &GitHubClientMock{
//			GetTopRepoDetailsFunc: func(ctx context.Context) ([]clientgithubrepo.RepoDetail, error) {
//				panic("mock out the GetTopRepoDetails method")
//			},
//		}
//
//		// use mockedGitHubClient in code that requires cronworker.GitHubClient
//		// and then make assertions.
//
//	}
type GitHubClientMock struct {
	// GetTopRepoDetailsFunc mocks the GetTopRepoDetails method.
	GetTopRepoDetailsFunc func(ctx context.Context) ([]clientgithubrepo.RepoDetail, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetTopRepoDetails holds details about calls to the GetTopRepoDetails method.
		GetTopRepoDetails []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
	lockGetTopRepoDetails sync.RWMutex
}

// GetTopRepoDetails calls GetTopRepoDetailsFunc.
func (mock *GitHubClientMock) GetTopRepoDetails(ctx context.Context) ([]clientgithubrepo.RepoDetail, error) {
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetTopRepoDetails.Lock()
	mock.calls.GetTopRepoDetails = append(mock.calls.GetTopRepoDetails, callInfo)
	mock.lockGetTopRepoDetails.Unlock()
	if mock.GetTopRepoDetailsFunc == nil {
		var (
			outOut []clientgithubrepo.RepoDetail
			errOut error
		)
		return outOut, errOut
	}
	return mock.GetTopRepoDetailsFunc(ctx)
}

// GetTopRepoDetailsCalls gets all the calls that were made to GetTopRepoDetails.
// Check the length with:
//
//	len(mockedGitHubClient.GetTopRepoDetailsCalls())
func (mock *GitHubClientMock) GetTopRepoDetailsCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetTopRepoDetails.RLock()
	calls = mock.calls.GetTopRepoDetails
	mock.lockGetTopRepoDetails.RUnlock()
	return calls
}
