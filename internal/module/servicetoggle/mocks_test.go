// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package servicetoggle_test

import (
	"context"
	"github.com/avrebarra/goggle/internal/module/serviceaccesslog"
	"github.com/avrebarra/goggle/internal/module/serviceaccesslog/domainaccesslog"
	"github.com/avrebarra/goggle/internal/module/servicetoggle"
	domaintoggle "github.com/avrebarra/goggle/internal/module/servicetoggle/domaintoggle"
	storagetoggle "github.com/avrebarra/goggle/internal/module/servicetoggle/storetoggle"
	"sync"
)

// Ensure, that ServiceMock does implement servicetoggle.Service.
// If this is not the case, regenerate this file with moq.
var _ servicetoggle.Service = &ServiceMock{}

// ServiceMock is a mock implementation of servicetoggle.Service.
//
//	func TestSomethingThatUsesService(t *testing.T) {
//
//		// make and configure a mocked servicetoggle.Service
//		mockedService := &ServiceMock{
//			DoCreateToggleFunc: func(ctx context.Context, in domaintoggle.Toggle) (domaintoggle.Toggle, error) {
//				panic("mock out the DoCreateToggle method")
//			},
//			DoGetToggleFunc: func(ctx context.Context, id string) (domaintoggle.ToggleWithDetail, error) {
//				panic("mock out the DoGetToggle method")
//			},
//			DoListStrayTogglesFunc: func(ctx context.Context, in servicetoggle.ParamsDoListStrayToggles) ([]domaintoggle.ToggleWithDetail, int64, error) {
//				panic("mock out the DoListStrayToggles method")
//			},
//			DoListTogglesFunc: func(ctx context.Context, in servicetoggle.ParamsDoListToggles) ([]domaintoggle.ToggleWithDetail, int64, error) {
//				panic("mock out the DoListToggles method")
//			},
//			DoRemoveToggleFunc: func(ctx context.Context, id string) (domaintoggle.Toggle, error) {
//				panic("mock out the DoRemoveToggle method")
//			},
//			DoStatToggleFunc: func(ctx context.Context, id string) (domaintoggle.ToggleStat, error) {
//				panic("mock out the DoStatToggle method")
//			},
//			DoUpdateToggleFunc: func(ctx context.Context, id string, in domaintoggle.Toggle) (domaintoggle.Toggle, error) {
//				panic("mock out the DoUpdateToggle method")
//			},
//		}
//
//		// use mockedService in code that requires servicetoggle.Service
//		// and then make assertions.
//
//	}
type ServiceMock struct {
	// DoCreateToggleFunc mocks the DoCreateToggle method.
	DoCreateToggleFunc func(ctx context.Context, in domaintoggle.Toggle) (domaintoggle.Toggle, error)

	// DoGetToggleFunc mocks the DoGetToggle method.
	DoGetToggleFunc func(ctx context.Context, id string) (domaintoggle.ToggleWithDetail, error)

	// DoListStrayTogglesFunc mocks the DoListStrayToggles method.
	DoListStrayTogglesFunc func(ctx context.Context, in servicetoggle.ParamsDoListStrayToggles) ([]domaintoggle.ToggleWithDetail, int64, error)

	// DoListTogglesFunc mocks the DoListToggles method.
	DoListTogglesFunc func(ctx context.Context, in servicetoggle.ParamsDoListToggles) ([]domaintoggle.ToggleWithDetail, int64, error)

	// DoRemoveToggleFunc mocks the DoRemoveToggle method.
	DoRemoveToggleFunc func(ctx context.Context, id string) (domaintoggle.Toggle, error)

	// DoStatToggleFunc mocks the DoStatToggle method.
	DoStatToggleFunc func(ctx context.Context, id string) (domaintoggle.ToggleStat, error)

	// DoUpdateToggleFunc mocks the DoUpdateToggle method.
	DoUpdateToggleFunc func(ctx context.Context, id string, in domaintoggle.Toggle) (domaintoggle.Toggle, error)

	// calls tracks calls to the methods.
	calls struct {
		// DoCreateToggle holds details about calls to the DoCreateToggle method.
		DoCreateToggle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In domaintoggle.Toggle
		}
		// DoGetToggle holds details about calls to the DoGetToggle method.
		DoGetToggle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// DoListStrayToggles holds details about calls to the DoListStrayToggles method.
		DoListStrayToggles []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In servicetoggle.ParamsDoListStrayToggles
		}
		// DoListToggles holds details about calls to the DoListToggles method.
		DoListToggles []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In servicetoggle.ParamsDoListToggles
		}
		// DoRemoveToggle holds details about calls to the DoRemoveToggle method.
		DoRemoveToggle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// DoStatToggle holds details about calls to the DoStatToggle method.
		DoStatToggle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// DoUpdateToggle holds details about calls to the DoUpdateToggle method.
		DoUpdateToggle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
			// In is the in argument value.
			In domaintoggle.Toggle
		}
	}
	lockDoCreateToggle     sync.RWMutex
	lockDoGetToggle        sync.RWMutex
	lockDoListStrayToggles sync.RWMutex
	lockDoListToggles      sync.RWMutex
	lockDoRemoveToggle     sync.RWMutex
	lockDoStatToggle       sync.RWMutex
	lockDoUpdateToggle     sync.RWMutex
}

// DoCreateToggle calls DoCreateToggleFunc.
func (mock *ServiceMock) DoCreateToggle(ctx context.Context, in domaintoggle.Toggle) (domaintoggle.Toggle, error) {
	callInfo := struct {
		Ctx context.Context
		In  domaintoggle.Toggle
	}{
		Ctx: ctx,
		In:  in,
	}
	mock.lockDoCreateToggle.Lock()
	mock.calls.DoCreateToggle = append(mock.calls.DoCreateToggle, callInfo)
	mock.lockDoCreateToggle.Unlock()
	if mock.DoCreateToggleFunc == nil {
		var (
			outOut domaintoggle.Toggle
			errOut error
		)
		return outOut, errOut
	}
	return mock.DoCreateToggleFunc(ctx, in)
}

// DoCreateToggleCalls gets all the calls that were made to DoCreateToggle.
// Check the length with:
//
//	len(mockedService.DoCreateToggleCalls())
func (mock *ServiceMock) DoCreateToggleCalls() []struct {
	Ctx context.Context
	In  domaintoggle.Toggle
} {
	var calls []struct {
		Ctx context.Context
		In  domaintoggle.Toggle
	}
	mock.lockDoCreateToggle.RLock()
	calls = mock.calls.DoCreateToggle
	mock.lockDoCreateToggle.RUnlock()
	return calls
}

// DoGetToggle calls DoGetToggleFunc.
func (mock *ServiceMock) DoGetToggle(ctx context.Context, id string) (domaintoggle.ToggleWithDetail, error) {
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockDoGetToggle.Lock()
	mock.calls.DoGetToggle = append(mock.calls.DoGetToggle, callInfo)
	mock.lockDoGetToggle.Unlock()
	if mock.DoGetToggleFunc == nil {
		var (
			outOut domaintoggle.ToggleWithDetail
			errOut error
		)
		return outOut, errOut
	}
	return mock.DoGetToggleFunc(ctx, id)
}

// DoGetToggleCalls gets all the calls that were made to DoGetToggle.
// Check the length with:
//
//	len(mockedService.DoGetToggleCalls())
func (mock *ServiceMock) DoGetToggleCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockDoGetToggle.RLock()
	calls = mock.calls.DoGetToggle
	mock.lockDoGetToggle.RUnlock()
	return calls
}

// DoListStrayToggles calls DoListStrayTogglesFunc.
func (mock *ServiceMock) DoListStrayToggles(ctx context.Context, in servicetoggle.ParamsDoListStrayToggles) ([]domaintoggle.ToggleWithDetail, int64, error) {
	callInfo := struct {
		Ctx context.Context
		In  servicetoggle.ParamsDoListStrayToggles
	}{
		Ctx: ctx,
		In:  in,
	}
	mock.lockDoListStrayToggles.Lock()
	mock.calls.DoListStrayToggles = append(mock.calls.DoListStrayToggles, callInfo)
	mock.lockDoListStrayToggles.Unlock()
	if mock.DoListStrayTogglesFunc == nil {
		var (
			outOut   []domaintoggle.ToggleWithDetail
			totalOut int64
			errOut   error
		)
		return outOut, totalOut, errOut
	}
	return mock.DoListStrayTogglesFunc(ctx, in)
}

// DoListStrayTogglesCalls gets all the calls that were made to DoListStrayToggles.
// Check the length with:
//
//	len(mockedService.DoListStrayTogglesCalls())
func (mock *ServiceMock) DoListStrayTogglesCalls() []struct {
	Ctx context.Context
	In  servicetoggle.ParamsDoListStrayToggles
} {
	var calls []struct {
		Ctx context.Context
		In  servicetoggle.ParamsDoListStrayToggles
	}
	mock.lockDoListStrayToggles.RLock()
	calls = mock.calls.DoListStrayToggles
	mock.lockDoListStrayToggles.RUnlock()
	return calls
}

// DoListToggles calls DoListTogglesFunc.
func (mock *ServiceMock) DoListToggles(ctx context.Context, in servicetoggle.ParamsDoListToggles) ([]domaintoggle.ToggleWithDetail, int64, error) {
	callInfo := struct {
		Ctx context.Context
		In  servicetoggle.ParamsDoListToggles
	}{
		Ctx: ctx,
		In:  in,
	}
	mock.lockDoListToggles.Lock()
	mock.calls.DoListToggles = append(mock.calls.DoListToggles, callInfo)
	mock.lockDoListToggles.Unlock()
	if mock.DoListTogglesFunc == nil {
		var (
			outOut   []domaintoggle.ToggleWithDetail
			totalOut int64
			errOut   error
		)
		return outOut, totalOut, errOut
	}
	return mock.DoListTogglesFunc(ctx, in)
}

// DoListTogglesCalls gets all the calls that were made to DoListToggles.
// Check the length with:
//
//	len(mockedService.DoListTogglesCalls())
func (mock *ServiceMock) DoListTogglesCalls() []struct {
	Ctx context.Context
	In  servicetoggle.ParamsDoListToggles
} {
	var calls []struct {
		Ctx context.Context
		In  servicetoggle.ParamsDoListToggles
	}
	mock.lockDoListToggles.RLock()
	calls = mock.calls.DoListToggles
	mock.lockDoListToggles.RUnlock()
	return calls
}

// DoRemoveToggle calls DoRemoveToggleFunc.
func (mock *ServiceMock) DoRemoveToggle(ctx context.Context, id string) (domaintoggle.Toggle, error) {
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockDoRemoveToggle.Lock()
	mock.calls.DoRemoveToggle = append(mock.calls.DoRemoveToggle, callInfo)
	mock.lockDoRemoveToggle.Unlock()
	if mock.DoRemoveToggleFunc == nil {
		var (
			outOut domaintoggle.Toggle
			errOut error
		)
		return outOut, errOut
	}
	return mock.DoRemoveToggleFunc(ctx, id)
}

// DoRemoveToggleCalls gets all the calls that were made to DoRemoveToggle.
// Check the length with:
//
//	len(mockedService.DoRemoveToggleCalls())
func (mock *ServiceMock) DoRemoveToggleCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockDoRemoveToggle.RLock()
	calls = mock.calls.DoRemoveToggle
	mock.lockDoRemoveToggle.RUnlock()
	return calls
}

// DoStatToggle calls DoStatToggleFunc.
func (mock *ServiceMock) DoStatToggle(ctx context.Context, id string) (domaintoggle.ToggleStat, error) {
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockDoStatToggle.Lock()
	mock.calls.DoStatToggle = append(mock.calls.DoStatToggle, callInfo)
	mock.lockDoStatToggle.Unlock()
	if mock.DoStatToggleFunc == nil {
		var (
			outOut domaintoggle.ToggleStat
			errOut error
		)
		return outOut, errOut
	}
	return mock.DoStatToggleFunc(ctx, id)
}

// DoStatToggleCalls gets all the calls that were made to DoStatToggle.
// Check the length with:
//
//	len(mockedService.DoStatToggleCalls())
func (mock *ServiceMock) DoStatToggleCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockDoStatToggle.RLock()
	calls = mock.calls.DoStatToggle
	mock.lockDoStatToggle.RUnlock()
	return calls
}

// DoUpdateToggle calls DoUpdateToggleFunc.
func (mock *ServiceMock) DoUpdateToggle(ctx context.Context, id string, in domaintoggle.Toggle) (domaintoggle.Toggle, error) {
	callInfo := struct {
		Ctx context.Context
		ID  string
		In  domaintoggle.Toggle
	}{
		Ctx: ctx,
		ID:  id,
		In:  in,
	}
	mock.lockDoUpdateToggle.Lock()
	mock.calls.DoUpdateToggle = append(mock.calls.DoUpdateToggle, callInfo)
	mock.lockDoUpdateToggle.Unlock()
	if mock.DoUpdateToggleFunc == nil {
		var (
			outOut domaintoggle.Toggle
			errOut error
		)
		return outOut, errOut
	}
	return mock.DoUpdateToggleFunc(ctx, id, in)
}

// DoUpdateToggleCalls gets all the calls that were made to DoUpdateToggle.
// Check the length with:
//
//	len(mockedService.DoUpdateToggleCalls())
func (mock *ServiceMock) DoUpdateToggleCalls() []struct {
	Ctx context.Context
	ID  string
	In  domaintoggle.Toggle
} {
	var calls []struct {
		Ctx context.Context
		ID  string
		In  domaintoggle.Toggle
	}
	mock.lockDoUpdateToggle.RLock()
	calls = mock.calls.DoUpdateToggle
	mock.lockDoUpdateToggle.RUnlock()
	return calls
}

// Ensure, that StorageToggleMock does implement servicetoggle.StorageToggle.
// If this is not the case, regenerate this file with moq.
var _ servicetoggle.StorageToggle = &StorageToggleMock{}

// StorageToggleMock is a mock implementation of servicetoggle.StorageToggle.
//
//	func TestSomethingThatUsesStorageToggle(t *testing.T) {
//
//		// make and configure a mocked servicetoggle.StorageToggle
//		mockedStorageToggle := &StorageToggleMock{
//			FetchPagedFunc: func(ctx context.Context, in storagetoggle.ParamsFetchPaged) ([]domaintoggle.ToggleWithDetail, int64, error) {
//				panic("mock out the FetchPaged method")
//			},
//			FetchToggleStatByIDFunc: func(ctx context.Context, id string) (domaintoggle.ToggleStat, error) {
//				panic("mock out the FetchToggleStatByID method")
//			},
//			ListHeadlessAccessPagedFunc: func(ctx context.Context, in storagetoggle.ParamsListHeadlessAccessPaged) ([]domaintoggle.ToggleWithDetail, int64, error) {
//				panic("mock out the ListHeadlessAccessPaged method")
//			},
//			RemoveTogglesByIDsFunc: func(ctx context.Context, ids []string) error {
//				panic("mock out the RemoveTogglesByIDs method")
//			},
//			UpsertToggleFunc: func(ctx context.Context, in domaintoggle.Toggle) (domaintoggle.Toggle, error) {
//				panic("mock out the UpsertToggle method")
//			},
//		}
//
//		// use mockedStorageToggle in code that requires servicetoggle.StorageToggle
//		// and then make assertions.
//
//	}
type StorageToggleMock struct {
	// FetchPagedFunc mocks the FetchPaged method.
	FetchPagedFunc func(ctx context.Context, in storagetoggle.ParamsFetchPaged) ([]domaintoggle.ToggleWithDetail, int64, error)

	// FetchToggleStatByIDFunc mocks the FetchToggleStatByID method.
	FetchToggleStatByIDFunc func(ctx context.Context, id string) (domaintoggle.ToggleStat, error)

	// ListHeadlessAccessPagedFunc mocks the ListHeadlessAccessPaged method.
	ListHeadlessAccessPagedFunc func(ctx context.Context, in storagetoggle.ParamsListHeadlessAccessPaged) ([]domaintoggle.ToggleWithDetail, int64, error)

	// RemoveTogglesByIDsFunc mocks the RemoveTogglesByIDs method.
	RemoveTogglesByIDsFunc func(ctx context.Context, ids []string) error

	// UpsertToggleFunc mocks the UpsertToggle method.
	UpsertToggleFunc func(ctx context.Context, in domaintoggle.Toggle) (domaintoggle.Toggle, error)

	// calls tracks calls to the methods.
	calls struct {
		// FetchPaged holds details about calls to the FetchPaged method.
		FetchPaged []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In storagetoggle.ParamsFetchPaged
		}
		// FetchToggleStatByID holds details about calls to the FetchToggleStatByID method.
		FetchToggleStatByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// ListHeadlessAccessPaged holds details about calls to the ListHeadlessAccessPaged method.
		ListHeadlessAccessPaged []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In storagetoggle.ParamsListHeadlessAccessPaged
		}
		// RemoveTogglesByIDs holds details about calls to the RemoveTogglesByIDs method.
		RemoveTogglesByIDs []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Ids is the ids argument value.
			Ids []string
		}
		// UpsertToggle holds details about calls to the UpsertToggle method.
		UpsertToggle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In domaintoggle.Toggle
		}
	}
	lockFetchPaged              sync.RWMutex
	lockFetchToggleStatByID     sync.RWMutex
	lockListHeadlessAccessPaged sync.RWMutex
	lockRemoveTogglesByIDs      sync.RWMutex
	lockUpsertToggle            sync.RWMutex
}

// FetchPaged calls FetchPagedFunc.
func (mock *StorageToggleMock) FetchPaged(ctx context.Context, in storagetoggle.ParamsFetchPaged) ([]domaintoggle.ToggleWithDetail, int64, error) {
	callInfo := struct {
		Ctx context.Context
		In  storagetoggle.ParamsFetchPaged
	}{
		Ctx: ctx,
		In:  in,
	}
	mock.lockFetchPaged.Lock()
	mock.calls.FetchPaged = append(mock.calls.FetchPaged, callInfo)
	mock.lockFetchPaged.Unlock()
	if mock.FetchPagedFunc == nil {
		var (
			outOut   []domaintoggle.ToggleWithDetail
			totalOut int64
			errOut   error
		)
		return outOut, totalOut, errOut
	}
	return mock.FetchPagedFunc(ctx, in)
}

// FetchPagedCalls gets all the calls that were made to FetchPaged.
// Check the length with:
//
//	len(mockedStorageToggle.FetchPagedCalls())
func (mock *StorageToggleMock) FetchPagedCalls() []struct {
	Ctx context.Context
	In  storagetoggle.ParamsFetchPaged
} {
	var calls []struct {
		Ctx context.Context
		In  storagetoggle.ParamsFetchPaged
	}
	mock.lockFetchPaged.RLock()
	calls = mock.calls.FetchPaged
	mock.lockFetchPaged.RUnlock()
	return calls
}

// FetchToggleStatByID calls FetchToggleStatByIDFunc.
func (mock *StorageToggleMock) FetchToggleStatByID(ctx context.Context, id string) (domaintoggle.ToggleStat, error) {
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockFetchToggleStatByID.Lock()
	mock.calls.FetchToggleStatByID = append(mock.calls.FetchToggleStatByID, callInfo)
	mock.lockFetchToggleStatByID.Unlock()
	if mock.FetchToggleStatByIDFunc == nil {
		var (
			outOut domaintoggle.ToggleStat
			errOut error
		)
		return outOut, errOut
	}
	return mock.FetchToggleStatByIDFunc(ctx, id)
}

// FetchToggleStatByIDCalls gets all the calls that were made to FetchToggleStatByID.
// Check the length with:
//
//	len(mockedStorageToggle.FetchToggleStatByIDCalls())
func (mock *StorageToggleMock) FetchToggleStatByIDCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockFetchToggleStatByID.RLock()
	calls = mock.calls.FetchToggleStatByID
	mock.lockFetchToggleStatByID.RUnlock()
	return calls
}

// ListHeadlessAccessPaged calls ListHeadlessAccessPagedFunc.
func (mock *StorageToggleMock) ListHeadlessAccessPaged(ctx context.Context, in storagetoggle.ParamsListHeadlessAccessPaged) ([]domaintoggle.ToggleWithDetail, int64, error) {
	callInfo := struct {
		Ctx context.Context
		In  storagetoggle.ParamsListHeadlessAccessPaged
	}{
		Ctx: ctx,
		In:  in,
	}
	mock.lockListHeadlessAccessPaged.Lock()
	mock.calls.ListHeadlessAccessPaged = append(mock.calls.ListHeadlessAccessPaged, callInfo)
	mock.lockListHeadlessAccessPaged.Unlock()
	if mock.ListHeadlessAccessPagedFunc == nil {
		var (
			outOut   []domaintoggle.ToggleWithDetail
			totalOut int64
			errOut   error
		)
		return outOut, totalOut, errOut
	}
	return mock.ListHeadlessAccessPagedFunc(ctx, in)
}

// ListHeadlessAccessPagedCalls gets all the calls that were made to ListHeadlessAccessPaged.
// Check the length with:
//
//	len(mockedStorageToggle.ListHeadlessAccessPagedCalls())
func (mock *StorageToggleMock) ListHeadlessAccessPagedCalls() []struct {
	Ctx context.Context
	In  storagetoggle.ParamsListHeadlessAccessPaged
} {
	var calls []struct {
		Ctx context.Context
		In  storagetoggle.ParamsListHeadlessAccessPaged
	}
	mock.lockListHeadlessAccessPaged.RLock()
	calls = mock.calls.ListHeadlessAccessPaged
	mock.lockListHeadlessAccessPaged.RUnlock()
	return calls
}

// RemoveTogglesByIDs calls RemoveTogglesByIDsFunc.
func (mock *StorageToggleMock) RemoveTogglesByIDs(ctx context.Context, ids []string) error {
	callInfo := struct {
		Ctx context.Context
		Ids []string
	}{
		Ctx: ctx,
		Ids: ids,
	}
	mock.lockRemoveTogglesByIDs.Lock()
	mock.calls.RemoveTogglesByIDs = append(mock.calls.RemoveTogglesByIDs, callInfo)
	mock.lockRemoveTogglesByIDs.Unlock()
	if mock.RemoveTogglesByIDsFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.RemoveTogglesByIDsFunc(ctx, ids)
}

// RemoveTogglesByIDsCalls gets all the calls that were made to RemoveTogglesByIDs.
// Check the length with:
//
//	len(mockedStorageToggle.RemoveTogglesByIDsCalls())
func (mock *StorageToggleMock) RemoveTogglesByIDsCalls() []struct {
	Ctx context.Context
	Ids []string
} {
	var calls []struct {
		Ctx context.Context
		Ids []string
	}
	mock.lockRemoveTogglesByIDs.RLock()
	calls = mock.calls.RemoveTogglesByIDs
	mock.lockRemoveTogglesByIDs.RUnlock()
	return calls
}

// UpsertToggle calls UpsertToggleFunc.
func (mock *StorageToggleMock) UpsertToggle(ctx context.Context, in domaintoggle.Toggle) (domaintoggle.Toggle, error) {
	callInfo := struct {
		Ctx context.Context
		In  domaintoggle.Toggle
	}{
		Ctx: ctx,
		In:  in,
	}
	mock.lockUpsertToggle.Lock()
	mock.calls.UpsertToggle = append(mock.calls.UpsertToggle, callInfo)
	mock.lockUpsertToggle.Unlock()
	if mock.UpsertToggleFunc == nil {
		var (
			outOut domaintoggle.Toggle
			errOut error
		)
		return outOut, errOut
	}
	return mock.UpsertToggleFunc(ctx, in)
}

// UpsertToggleCalls gets all the calls that were made to UpsertToggle.
// Check the length with:
//
//	len(mockedStorageToggle.UpsertToggleCalls())
func (mock *StorageToggleMock) UpsertToggleCalls() []struct {
	Ctx context.Context
	In  domaintoggle.Toggle
} {
	var calls []struct {
		Ctx context.Context
		In  domaintoggle.Toggle
	}
	mock.lockUpsertToggle.RLock()
	calls = mock.calls.UpsertToggle
	mock.lockUpsertToggle.RUnlock()
	return calls
}

// Ensure, that ServiceAccessLogMock does implement servicetoggle.ServiceAccessLog.
// If this is not the case, regenerate this file with moq.
var _ servicetoggle.ServiceAccessLog = &ServiceAccessLogMock{}

// ServiceAccessLogMock is a mock implementation of servicetoggle.ServiceAccessLog.
//
//	func TestSomethingThatUsesServiceAccessLog(t *testing.T) {
//
//		// make and configure a mocked servicetoggle.ServiceAccessLog
//		mockedServiceAccessLog := &ServiceAccessLogMock{
//			AddAccessLogFunc: func(ctx context.Context, toggleid string) error {
//				panic("mock out the AddAccessLog method")
//			},
//			DeleteAccessLogByToggleIDFunc: func(ctx context.Context, toggleid string) error {
//				panic("mock out the DeleteAccessLogByToggleID method")
//			},
//			DoListLogsFunc: func(ctx context.Context, in serviceaccesslog.ParamsDoListLogs) ([]domainaccesslog.AccessLog, int64, error) {
//				panic("mock out the DoListLogs method")
//			},
//		}
//
//		// use mockedServiceAccessLog in code that requires servicetoggle.ServiceAccessLog
//		// and then make assertions.
//
//	}
type ServiceAccessLogMock struct {
	// AddAccessLogFunc mocks the AddAccessLog method.
	AddAccessLogFunc func(ctx context.Context, toggleid string) error

	// DeleteAccessLogByToggleIDFunc mocks the DeleteAccessLogByToggleID method.
	DeleteAccessLogByToggleIDFunc func(ctx context.Context, toggleid string) error

	// DoListLogsFunc mocks the DoListLogs method.
	DoListLogsFunc func(ctx context.Context, in serviceaccesslog.ParamsDoListLogs) ([]domainaccesslog.AccessLog, int64, error)

	// calls tracks calls to the methods.
	calls struct {
		// AddAccessLog holds details about calls to the AddAccessLog method.
		AddAccessLog []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Toggleid is the toggleid argument value.
			Toggleid string
		}
		// DeleteAccessLogByToggleID holds details about calls to the DeleteAccessLogByToggleID method.
		DeleteAccessLogByToggleID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Toggleid is the toggleid argument value.
			Toggleid string
		}
		// DoListLogs holds details about calls to the DoListLogs method.
		DoListLogs []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In serviceaccesslog.ParamsDoListLogs
		}
	}
	lockAddAccessLog              sync.RWMutex
	lockDeleteAccessLogByToggleID sync.RWMutex
	lockDoListLogs                sync.RWMutex
}

// AddAccessLog calls AddAccessLogFunc.
func (mock *ServiceAccessLogMock) AddAccessLog(ctx context.Context, toggleid string) error {
	callInfo := struct {
		Ctx      context.Context
		Toggleid string
	}{
		Ctx:      ctx,
		Toggleid: toggleid,
	}
	mock.lockAddAccessLog.Lock()
	mock.calls.AddAccessLog = append(mock.calls.AddAccessLog, callInfo)
	mock.lockAddAccessLog.Unlock()
	if mock.AddAccessLogFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.AddAccessLogFunc(ctx, toggleid)
}

// AddAccessLogCalls gets all the calls that were made to AddAccessLog.
// Check the length with:
//
//	len(mockedServiceAccessLog.AddAccessLogCalls())
func (mock *ServiceAccessLogMock) AddAccessLogCalls() []struct {
	Ctx      context.Context
	Toggleid string
} {
	var calls []struct {
		Ctx      context.Context
		Toggleid string
	}
	mock.lockAddAccessLog.RLock()
	calls = mock.calls.AddAccessLog
	mock.lockAddAccessLog.RUnlock()
	return calls
}

// DeleteAccessLogByToggleID calls DeleteAccessLogByToggleIDFunc.
func (mock *ServiceAccessLogMock) DeleteAccessLogByToggleID(ctx context.Context, toggleid string) error {
	callInfo := struct {
		Ctx      context.Context
		Toggleid string
	}{
		Ctx:      ctx,
		Toggleid: toggleid,
	}
	mock.lockDeleteAccessLogByToggleID.Lock()
	mock.calls.DeleteAccessLogByToggleID = append(mock.calls.DeleteAccessLogByToggleID, callInfo)
	mock.lockDeleteAccessLogByToggleID.Unlock()
	if mock.DeleteAccessLogByToggleIDFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.DeleteAccessLogByToggleIDFunc(ctx, toggleid)
}

// DeleteAccessLogByToggleIDCalls gets all the calls that were made to DeleteAccessLogByToggleID.
// Check the length with:
//
//	len(mockedServiceAccessLog.DeleteAccessLogByToggleIDCalls())
func (mock *ServiceAccessLogMock) DeleteAccessLogByToggleIDCalls() []struct {
	Ctx      context.Context
	Toggleid string
} {
	var calls []struct {
		Ctx      context.Context
		Toggleid string
	}
	mock.lockDeleteAccessLogByToggleID.RLock()
	calls = mock.calls.DeleteAccessLogByToggleID
	mock.lockDeleteAccessLogByToggleID.RUnlock()
	return calls
}

// DoListLogs calls DoListLogsFunc.
func (mock *ServiceAccessLogMock) DoListLogs(ctx context.Context, in serviceaccesslog.ParamsDoListLogs) ([]domainaccesslog.AccessLog, int64, error) {
	callInfo := struct {
		Ctx context.Context
		In  serviceaccesslog.ParamsDoListLogs
	}{
		Ctx: ctx,
		In:  in,
	}
	mock.lockDoListLogs.Lock()
	mock.calls.DoListLogs = append(mock.calls.DoListLogs, callInfo)
	mock.lockDoListLogs.Unlock()
	if mock.DoListLogsFunc == nil {
		var (
			outOut   []domainaccesslog.AccessLog
			totalOut int64
			errOut   error
		)
		return outOut, totalOut, errOut
	}
	return mock.DoListLogsFunc(ctx, in)
}

// DoListLogsCalls gets all the calls that were made to DoListLogs.
// Check the length with:
//
//	len(mockedServiceAccessLog.DoListLogsCalls())
func (mock *ServiceAccessLogMock) DoListLogsCalls() []struct {
	Ctx context.Context
	In  serviceaccesslog.ParamsDoListLogs
} {
	var calls []struct {
		Ctx context.Context
		In  serviceaccesslog.ParamsDoListLogs
	}
	mock.lockDoListLogs.RLock()
	calls = mock.calls.DoListLogs
	mock.lockDoListLogs.RUnlock()
	return calls
}
